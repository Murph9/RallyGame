
uniform int m_TessellationFactor;
layout(vertices=4) out;

out gl_PerVertex{
  vec4 gl_Position;
}gl_out[];


uniform vec3 g_CameraPosition;
uniform vec3 g_Camera;

// attributes of the input CPs
in vec3 WorldPos_CS_in[];
in vec2 TexCoord_CS_in[];
in vec3 Normal_CS_in[];
in vec4 Tangent_CS_in[];

// attributes of the output CPs
out vec3 WorldPos_ES_in[];
out vec2 TexCoord_ES_in[];
out vec3 Normal_ES_in[];
out vec4 Tangent_ES_in[];

float GetTessLevel(float Distance0, float Distance1)
{
    float AvgDistance = (Distance0 + Distance1) / 2.0;

    if (AvgDistance <= 50.0 || m_TessellationFactor < 4) {
        return m_TessellationFactor;
    }
    else if (AvgDistance <= 100.0 || m_TessellationFactor < 8) {
        return m_TessellationFactor/4;
    }
    else if (AvgDistance <= 150.0 || m_TessellationFactor < 16) {
        return m_TessellationFactor/8;
    }
    else {
        return m_TessellationFactor/16;
    }
} 

void main(){

    TexCoord_ES_in[gl_InvocationID] = TexCoord_CS_in[gl_InvocationID];
    Tangent_ES_in[gl_InvocationID] = Tangent_CS_in[gl_InvocationID];
    Normal_ES_in[gl_InvocationID] = Normal_CS_in[gl_InvocationID];
    WorldPos_ES_in[gl_InvocationID] = WorldPos_CS_in[gl_InvocationID];

    // Calculate the distance from the camera to the three control points
    float EyeToVertexDistance0 = distance(g_Camera, WorldPos_CS_in[0]);
    float EyeToVertexDistance1 = distance(g_Camera, WorldPos_CS_in[1]);
    float EyeToVertexDistance2 = distance(g_Camera, WorldPos_CS_in[2]);
    float EyeToVertexDistance3 = distance(g_Camera, WorldPos_CS_in[3]);

/*
    if (gl_InvocationID == 0){
        gl_TessLevelOuter[0]=m_TessellationFactor;
        gl_TessLevelOuter[1]=m_TessellationFactor;
        gl_TessLevelOuter[2]=m_TessellationFactor;
        gl_TessLevelOuter[3]=m_TessellationFactor;

        gl_TessLevelInner[0]=m_TessellationFactor;
        gl_TessLevelInner[1]=m_TessellationFactor;
    }
*/
        gl_TessLevelOuter[0]=GetTessLevel(EyeToVertexDistance0, EyeToVertexDistance1);
        gl_TessLevelOuter[1]=GetTessLevel(EyeToVertexDistance0, EyeToVertexDistance3);
        gl_TessLevelOuter[2]=GetTessLevel(EyeToVertexDistance2, EyeToVertexDistance3);
        gl_TessLevelOuter[3]=GetTessLevel(EyeToVertexDistance1, EyeToVertexDistance2);

        gl_TessLevelInner[0]= gl_TessLevelOuter[1];
        gl_TessLevelInner[1]= gl_TessLevelOuter[3];


    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
}