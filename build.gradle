plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    // Apply the application plugin to add support for building a CLI application.
    id 'application'
    id 'eclipse'
}

sourceCompatibility = 11

repositories {
    jcenter()
    maven {
        url "https://dl.bintray.com/jmonkeyengine/org.jmonkeyengine"
        url "https://dl.bintray.com/stephengold/jme3utilities" 
    }
}

//allow vscode -> buildship -> f5 to read the generated assets.jar
sourceSets {
    main {
        resources {
            srcDirs "build/assets/libs/"
        }
    }
}

project(":assets") {
    apply plugin: "java"
    
    buildDir = rootProject.file("build/assets")
    
    sourceSets {
        main {
            resources {
                srcDir '.'
                include '**'
                exclude '**/*.blend'
                exclude '**/*.ps1'
                exclude '**/*.py'
                exclude '**/*.blend1'
                exclude 'bin/*'
            }
        }
    }
}

def jme3Version = '3.2.4-stable'
dependencies {
    implementation 'com.google.guava:guava:28.0-jre'

    implementation "org.jmonkeyengine:jme3-bullet:${jme3Version}"
    implementation "org.jmonkeyengine:jme3-bullet-native:${jme3Version}"
    implementation "org.jmonkeyengine:jme3-core:${jme3Version}"
    implementation "org.jmonkeyengine:jme3-desktop:${jme3Version}"
    implementation "org.jmonkeyengine:jme3-effects:${jme3Version}"
    implementation "org.jmonkeyengine:jme3-lwjgl:${jme3Version}"
    implementation "org.jmonkeyengine:jme3-plugins:${jme3Version}"
    implementation "org.jmonkeyengine:jme3-terrain:${jme3Version}"
    implementation "org.jmonkeyengine:jme3-jogg:${jme3Version}"
    
    implementation 'org.yaml:snakeyaml:1.25'
    implementation 'com.simsilica:lemur:1.13.0'

    // Use JUnit Jupiter API for testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.5.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'

    runtimeOnly project(':assets')
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

application {
    // Define the main class for the application
    mainClassName = 'rallygame.game.Main'
}


task createFatJar(type: Jar) {
    archiveBaseName = 'rallyGame'

    manifest {
        attributes 'Main-Class': 'rallygame.game.Main'
    }

    from sourceSets.main.output
    dependsOn configurations.compileClasspath

    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }

    dependsOn 'build'
}

task createDuelFatJar(type: Jar) {
    archiveBaseName = 'duel'
    manifest {
        attributes 'Main-Class': 'rallygame.duel.DuelApp'
    }

    from sourceSets.main.output
    dependsOn configurations.compileClasspath

    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }

    dependsOn 'build'
}


task cleanBlendGltfFiles(type: Delete) {
    delete fileTree('assets') {
        include '**/*.blend.glb'
    }
}

def blenderCommand = "C:\\Program Files\\Blender Foundation\\Blender 2.82\\blender"
def blenderPythonFile = "$projectDir\\assets\\blend2gltf.py"

task convertAllBlendFiles {
    doFirst {
        ConfigurableFileTree files = fileTree(dir: 'assets', include: '**/*.blend')
        
        files.each { File file ->
            File glbFile = new File(file.path + '.glb')
            if (!glbFile.exists() && file.lastModified() > glbFile.lastModified()) {
                println 'Running: ' + file.path
                def ip = new ByteArrayOutputStream()
                exec {
                    standardOutput = ip
                    def command = '"' + blenderCommand + '" "'+file.path+'" ' + '--background ' + '--python "' + blenderPythonFile + '"'
                    commandLine 'cmd', '/s', '/c', '"'+command+'"'
                }
                //println ip
            } else {
                println 'generated is newer for: ' + file.name
            }
        }
    }
}
compileJava.dependsOn(convertAllBlendFiles)
